# Generated by Django 5.2 on 2025-04-20 15:40

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0010_city_country_airport_city_country_flightticket_and_more'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='railwayticket',
            name='companies',
        ),
        migrations.RemoveField(
            model_name='railwayticket',
            name='from_station',
        ),
        migrations.RemoveField(
            model_name='railwayticket',
            name='to_station',
        ),
        migrations.RemoveField(
            model_name='tour',
            name='city',
        ),
        migrations.AlterField(
            model_name='airport',
            name='code',
            field=models.CharField(help_text='Трёхбуквенный код аэропорта (IATA)', max_length=3, verbose_name='Код аэропорта'),
        ),
        migrations.AlterField(
            model_name='airport',
            name='name',
            field=models.CharField(max_length=200, verbose_name='Название аэропорта'),
        ),
        migrations.AlterField(
            model_name='country',
            name='code',
            field=models.CharField(blank=True, help_text='Двухбуквенный код страны (ISO)', max_length=2, null=True, verbose_name='Код страны'),
        ),
        migrations.AlterField(
            model_name='railwaystation',
            name='name',
            field=models.CharField(max_length=200, verbose_name='Название ж/д вокзала'),
        ),
        migrations.AlterUniqueTogether(
            name='city',
            unique_together={('name', 'country')},
        ),
        migrations.CreateModel(
            name='SearchAirTicket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('departure_date', models.DateField(verbose_name='Дата вылета')),
                ('departure_time', models.TimeField(verbose_name='Время вылета')),
                ('arrival_time', models.TimeField(verbose_name='Время прибытия')),
                ('duration', models.CharField(max_length=50, verbose_name='Время в пути')),
                ('has_transfer', models.BooleanField(default=False, verbose_name='Есть пересадка')),
                ('transfer_duration', models.PositiveIntegerField(blank=True, null=True, verbose_name='Длительность пересадки (ч)')),
                ('economy_available', models.BooleanField(default=True, verbose_name='Доступен эконом-класс')),
                ('economy_price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Цена эконом-класса')),
                ('business_available', models.BooleanField(default=False, verbose_name='Доступен бизнес-класс')),
                ('business_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Цена бизнес-класса')),
                ('recommendation_score', models.PositiveIntegerField(default=0, help_text='Чем выше значение, тем выше в результатах поиска (0-100)', verbose_name='Рейтинг рекомендации')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('airlines', models.ManyToManyField(to='api.airline', verbose_name='Авиакомпании')),
                ('from_airport', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='departures', to='api.airport', verbose_name='Аэропорт отправления')),
                ('to_airport', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='arrivals', to='api.airport', verbose_name='Аэропорт прибытия')),
                ('transfer_city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='air_transfers', to='api.city', verbose_name='Город пересадки')),
            ],
            options={
                'verbose_name': 'Авиабилет для поиска',
                'verbose_name_plural': 'Авиабилеты для поиска',
                'ordering': ['-recommendation_score', 'economy_price'],
            },
        ),
        migrations.CreateModel(
            name='SearchTour',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hotel_name', models.CharField(max_length=200, verbose_name='Название отеля')),
                ('hotel_stars', models.PositiveIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], verbose_name='Количество звезд отеля')),
                ('rating', models.DecimalField(decimal_places=1, help_text='Например: 4.8', max_digits=3, verbose_name='Рейтинг')),
                ('food_included', models.BooleanField(default=False, verbose_name='Питание включено')),
                ('pets_allowed', models.BooleanField(default=False, verbose_name='Можно с животными')),
                ('image', models.FileField(help_text='Поддерживаются форматы JPG, PNG, AVIF', upload_to='search_tours/', verbose_name='Фото тура')),
                ('price_per_night', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Цена за одну ночь')),
                ('recommendation_score', models.PositiveIntegerField(default=0, help_text='Чем выше значение, тем выше в результатах поиска (0-100)', verbose_name='Рейтинг рекомендации')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tours', to='api.city', verbose_name='Город')),
            ],
            options={
                'verbose_name': 'Тур для поиска',
                'verbose_name_plural': 'Туры для поиска',
                'ordering': ['-recommendation_score', 'price_per_night'],
            },
        ),
        migrations.CreateModel(
            name='SearchTrainTicket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('departure_date', models.DateField(verbose_name='Дата отправления')),
                ('departure_time', models.TimeField(verbose_name='Время отправления')),
                ('arrival_time', models.TimeField(verbose_name='Время прибытия')),
                ('duration', models.CharField(max_length=50, verbose_name='Время в пути')),
                ('sitting_available', models.BooleanField(default=False, verbose_name='Доступен сидячий')),
                ('sitting_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Цена сидячего')),
                ('platzkart_available', models.BooleanField(default=False, verbose_name='Доступен плацкарт')),
                ('platzkart_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Цена плацкарта')),
                ('coupe_available', models.BooleanField(default=False, verbose_name='Доступен купе')),
                ('coupe_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Цена купе')),
                ('sv_available', models.BooleanField(default=False, verbose_name='Доступен СВ')),
                ('sv_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Цена СВ')),
                ('recommendation_score', models.PositiveIntegerField(default=0, help_text='Чем выше значение, тем выше в результатах поиска (0-100)', verbose_name='Рейтинг рекомендации')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('companies', models.ManyToManyField(to='api.railwaycompany', verbose_name='Ж/Д компании')),
                ('from_station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='departures', to='api.railwaystation', verbose_name='Ж/Д вокзал отправления')),
                ('to_station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='arrivals', to='api.railwaystation', verbose_name='Ж/Д вокзал прибытия')),
            ],
            options={
                'verbose_name': 'Ж/Д билет для поиска',
                'verbose_name_plural': 'Ж/Д билеты для поиска',
                'ordering': ['-recommendation_score', 'coupe_price'],
            },
        ),
        migrations.DeleteModel(
            name='FlightTicket',
        ),
        migrations.DeleteModel(
            name='RailwayTicket',
        ),
        migrations.DeleteModel(
            name='Tour',
        ),
    ]
